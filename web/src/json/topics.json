{"how-jsx-works-in-react":[{"title":"How JSX works in React ?","content":"\nJSX is a syntax extension to JavaScript that allows us to write HTML like syntax. It is a subset of JavaScript that allows us to write HTML-like syntax.\n\n**Withouts JSX we would have to write HTML like syntax.**\n\n```jsx\nconst element = React.createElement(\n\t'div',\n\tnull,\n\tReact.createElement('h1', null, 'This is a header'),\n\tReact.createElement('p', null, 'This is a paragraph')\n)\n```\n\n**With JSX we can write HTML like syntax.**\n\n```jsx\nconst element = (\n\t<div>\n\t\t<h1>This is a header</h1>\n\t\t<p>This is a paragraph</p>\n\t</div>\n)\n```\n\nJSX uses babel to transpile HTML like syntax to JavaScript. Babel is a compiler that transpiles JavaScript code to JavaScript.\n","section":"how-jsx-works-in-react"}],"how-to-create-components-in-react":[{"title":"How to create components in React?","content":"\nThere are two ways to create components in React:\n\n    1. Create a component class.\n    2. Create a function component.\n\n1. **Create a component class.**\n   ES6 class syntax is used to create a component class.\n\n```jsx\nimport React from 'react'\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Hello World</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n2. **Create a function component.**\n   Function syntax is used to create a function component.\n\n   ```jsx\n   import React from 'react'\n   const App = () => {\n   \treturn (\n   \t\t<div>\n   \t\t\t<h1>Hello World</h1>\n   \t\t</div>\n   \t)\n   }\n   ```\n\nBoth components can be rendered to the screen using ReactDOM.render().\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n","section":"how-to-create-components-in-react"}],"what-are-pure-components-with-example":[{"title":"What are pure components with example?","content":"\nPure component, it is only re-rendered when its props change. They are a good way to optimize your application. Pure components are a good way to avoid bugs caused by side-effects. It's doesn't have a life cycle or state.\n\n**Example of a pure component:**\n\n```jsx\nimport React from 'react'\n\nconst PureComponent = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>{props.title}</h1>\n\t\t</div>\n\t)\n}\n\nexport default PureComponent\n```\n\n**Example of a component that is not pure:**\n\n```jsx\nimport React from 'react'\n\nconst Component = (props) => {\n\tconst [count, setCount] = React.useState(0)\n\tuseEffect(() => {\n\t\tfetch('https://api.github.com/users/facebook/repos')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCount(data.length)\n\t\t\t})\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{props.title}</h1>\n\t\t\t<h2>{count}</h2>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"what-are-pure-components-with-example"}],"what-is-react-and-why-use-it":[{"title":"What is React and why use it?","content":"\nReact is an open-source front-end JavaScript library that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.\n","section":"what-is-react-and-why-use-it","source":"https://github.com/sudheerj/reactjs-interview-questions#what-is-react"}],"what-is-state-in-react":[{"title":"What is state in React?","content":"\nState is a plain JavaScript object that represents the state of a React component. That may change over time as the component updates over the component's lifecycle.\n\nState is the only part of a React component that can change over time.\n\n**Example: State in Class Based Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass MyComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcount: 0,\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>You clicked {this.state.count} times</p>\n\t\t\t\t<button onClick={() => this.setState({ count: this.state.count + 1 })}>\n\t\t\t\t\tClick me\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n**Example: State in Functional Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst MyComponent = () => {\n\tconst [count, setCount] = React.useState(0)\n\treturn (\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"what-is-state-in-react","source":"https://www.simplilearn.com/tutorials/reactjs-tutorial/reactjs-state"}]}