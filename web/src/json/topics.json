{"1. why-not-to-modify-react-state-directly":[{"title":"Why Not To Modify React State Directly ?","content":"\nWhen we manually modify the state it won't trigger the component to re-render. So it's better to use the setState method.\n\n```jsx\nthis.setState({\n\tcount: this.state.count + 1,\n})\n```\n\n```jsx\nconst [count, setCount] = useState(0)\nsetCount(count + 1)\n```\n","section":"1. why-not-to-modify-react-state-directly","source":"https://www.xxxxx.com"}],"10. difference-between-html-and-react-event-handling":[{"title":"Difference between HTML and React Event Handling?","content":"\nThere are have some syntactic and differences rules between HTML and React event handling.\n\n**HTML** HTML event handling is done using the attribute or the addEventListener method. It directly works on the DOM (Real) element.\n\n```html\n<button onclick=\"alert('Hello')\">Click Me</button>\n\n<script>\n\tconst button = document.querySelector('button')\n\tbutton.addEventListener('click', function () {\n\t\talert('Hello')\n\t})\n</script>\n```\n\n**React** we use the concept of virtual DOM, so all the events need to specify at the time of creating the component. Here in App.js file, we have defined one component App, which is having a button. We have used “onClick” event and we are providing a method name instead of a string. As in JSX,\n\n```jsx\nconst App = () => {\n\tconst handleClick = () => {\n\t\talert('Hello')\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={handleClick}>Click Me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"10. difference-between-html-and-react-event-handling","source":"https://www.geeksforgeeks.org/difference-between-html-and-react-event-handling/"}],"11. Why Jsx?":[{"title":"Why Jsx?","content":"\nJSX is a JavaScript syntax extension for React. It allows you to write HTML-like syntax in your JavaScript code. React doesn’t require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\n\n**JSX in React**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst element = <h1>Hello, world!</h1>\n\nReactDOM.render(element, document.getElementById('root'))\n```\n","section":"11. Why Jsx?","source":"https://reactjs.org/"}],"12. Can browser read JSX directly?":[{"title":"Can browser read JSX directly?","content":"\nNo - Browser can't read JSX Because it is not a valid JavaScript syntax. Browser engine can't understand It and it will throw an error. JSX is not intended to implemented by the engine or browser. it is intended to be used by various transpilers and bundlers to convert JSX to JavaScript.\n","section":"12. Can browser read JSX directly?","source":"https://reactjs.org/"}],"13. How do you use JavaScript in JSX?":[{"title":"How do you use JavaScript in JSX?","content":"\nTo add Javascript code inside JSX, you need to use the { } syntax. In curly braces, you can write any valid JavaScript code. The code will be executed when the component is rendered.\n\n**Example of Javascript in JSX**\n\n```jsx\nconst App = () => (\n\t<div>\n\t\t<h1>{2 + 2}</h1>\n\t\t<p>This is a paragraph.</p>\n\t</div>\n)\n```\n\nThe above code will render the following HTML:\n\n```html\n<div>\n\t<h1>4</h1>\n\t<p>This is a paragraph.</p>\n</div>\n```\n\nWe can also use Javascript expressions inside attributes of JSX elements.\n\n```jsx\nconst App = () => {\n\tconst source = 'https://facebook.github.io/react/img/logo_og.png'\n\treturn (\n\t\t<div>\n\t\t\t<img src={source} />\n\t\t</div>\n\t)\n}\n```\n","section":"13. How do you use JavaScript in JSX?","source":"https://reactjs.org/"}],"14. What is Immutable ?":[{"title":"What is Immutable ?","content":"\nImmutable is a data structure that cannot be changed. For example, if you change the value of a property, the property is no longer the same. Immutable data structures are often used to prevent bugs from happening. In Immutable, you can't change the value of a property.\n\n**Example of Immutable**\n\n```js\n'use strict'\nconst obj = {\n\tname: 'John',\n\tage: 30,\n}\n\nconst newObj = Object.freeze(obj)\nnewObj.age = 40\n// throws an error Uncaught TypeError: Cannot assign to read only property 'age' of object '#<Object>'\n```\n","section":"14. What is Immutable ?"}],"15. What is component and props in React?":[{"title":"What is component and props in React?","content":"\nComponent is a function It accepts props as an argument and returns a React element. Return elements describe the UI how it should look. A component can be uses in other components jsx, or in the root component. In React there are two types of components: Class based and Functional Components.\n\n**Class based Components**\nClass based components are the most common type of components. They are the ones that are written in JavaScript ES6 classes.\n\n```js\nclass MyComponent extends React.Component {\n\trender() {\n\t\treturn <h1>Hello World</h1>\n\t}\n}\n```\n\n**Functional Components**\nFunctional components are the ones that are written in JavaScript ES6 functions.\n\n```js\nconst MyComponent = () => <h1>Hello World</h1>\n```\n\n### **Props**\n\nProps are the properties that are passed to a component.\n\n```js\nconst MyComponent = (props) => <h1>{props.title}</h1>\n```\n","section":"15. What is component and props in React?","source":"https://reactjs.org/"}],"16. Why should Component names start with capital letter in React?":[{"title":"Why should Component names start with capital letter in React?","content":"\nIf you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.\n","section":"16. Why should Component names start with capital letter in React?","source":"https://reactjs.org/"}],"17. What is mount and unmount React?":[{"title":"What is mount and unmount React?","content":"\nThe main job of React is to figure out what to render to the screen. React will do this by comparing the current state of the application to the previous state. React does so by `mounting` and `unmounting` components. When a component is mounted, React will render it to the DOM. When a component is unmounted, React will remove it from the DOM.\n","section":"17. What is mount and unmount React?","source":"https://reactjs.org/"}],"18. When render is called in React?":[{"title":"When render is called in React?","content":"\nFirst of all, `render()` is not user callable. It is part of the React component lifecycle. Generally, it gets called by React at various app stages when the React component instantiates for the first time, or when there is a new update to the component state. Render does not take any arguments and returns a JSX.\n","section":"18. When render is called in React?","source":"https://reactjs.org/"}],"19. What is uses of componentDidMount in react":[{"title":"What is uses of componentDidMount in react","content":"\nComponentDidMount is a special method that React calls after the component has been rendered to the DOM. This is a good place to put your setup code.\n\n**Note:** ComponentDidMount is called after the component has been rendered, not before.\n\n```jsx\nclass MyComponent extends React.Component {\n\tcomponentDidMount() {\n\t\t// do something\n\t}\n\trender() {\n\t\treturn <div />\n\t}\n}\n```\n","section":"19. What is uses of componentDidMount in react","source":"https://reactjs.org/"}],"2. why-is-the-key-important-in-react-list":[{"title":"Why is the key important in React list?","content":"\nThe main purpose of keys is to help React differentiate and distinguish elements from each other, increasing its performance when diffing between the virtual and real DOM. To use keys, simply add the prop inside an element such as `<li>` . Unique IDs are the best value to assign to keys.\n\n**Example:**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n\tconst names = ['John', 'Sara', 'Mark']\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hello World</h1>\n\t\t\t<ul>\n\t\t\t\t{names.map((name, index) => (\n\t\t\t\t\t<li key={index}>{name}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n```\n","section":"2. why-is-the-key-important-in-react-list","source":"https://betterprogramming.pub/why-react-keys-matter-an-introduction-136b7447cefc"}],"20. What is the use of componentWillUnmount?":[{"title":"What is the use of componentWillUnmount?","content":"\nThis life cycle method is called when a component is unmounted and destroyed. It is a good place to clean up any resources that were allocated during the component's life cycle. Such as timers, event listeners, and network requests or any subscriptions to external data sources.\n\n**Example of componentWillUnmount**\n\n```jsx\nclass Clock extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { date: new Date() }\n\t}\n\tcomponentDidMount() {\n\t\tthis.timerID = setInterval(() => this.tick(), 1000)\n\t}\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timerID)\n\t}\n\ttick() {\n\t\tthis.setState({\n\t\t\tdate: new Date(),\n\t\t})\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Hello, world!</h1>\n\t\t\t\t<h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\nThe above code will render the clock every second. When the component is unmounted, the timer is cleared.\n","section":"20. What is the use of componentWillUnmount?","source":"https://reactjs.org/"}],"21. What is State in react ?":[{"title":"What is State in react ?","content":"\nReact components has a built-in state object. The state object is where you store property values that belongs to the component. When the state object changes, the component re-renders.\n","section":"21. What is State in react ?","source":"https://reactjs.org/"}],"22. What is the lifecycle of a component?":[{"title":"What is the lifecycle of a component?","content":"\nComponents are created (mounted on the DOM), grow by updating, and then die (unmount on DOM). This is referred to as a component lifecycle. There are different lifecycle methods that React provides at different phases of a component's life.\n","section":"22. What is the lifecycle of a component?","source":"https://reactjs.org/"}],"23. What is SyntheticEvent":[{"title":"What is SyntheticEvent ?","content":"\nSyntheticEvent , a cross-browser wrapper around the browser's native event. It has the same interface as the browser's native event, including stopPropagation() and preventDefault() , except the events work identically across all browsers.\n","section":"23. What is SyntheticEvent","source":"https://reactjs.org/"}],"24. Why we use synthetic events in ReactJS ?":[{"title":"Why we use synthetic events in ReactJS ?","content":"\nDifferent browsers where the same event has different names. Here wrapper does is triggering all the different names for the same event effect. Therefore, whenever we are triggering an event in a ReactJS, we are not actually trying to trigger the real DOM event, instead, we are using the ReactJS custom event type, which is the synthetic event.\n\nThe examples of the synthetic events are onClick(), onBlur() and onChange(). These all are not real DOM events but react synthetic events.\n","section":"24. Why we use synthetic events in ReactJS ?","source":"https://www.geeksforgeeks.org"}],"25. What is the use of toggle in JavaScript?":[{"title":"What is the use of toggle in JavaScript?","content":"\nThe ontoggle event occurs when the user opens or closes the ` <details>` element. The `<details>` element specifies additional details that the user can view or hide on demand.\n","section":"25. What is the use of toggle in JavaScript?","source":"https://reactjs.org/"}],"26. How do I use componentWillMount?":[{"title":"How do I use componentWillMount?","content":"\nIn React, the componentWillMount() method is called before the render() method. This is where we can set up any initial state or perform any other operations before the render() method is called.\n\n**Note:** `componentWillMount()` is now deprecated in favor of `componentDidMount()`. Because it could be called multiple times, and maybe memory leaks could occur, So it is recommended to use `componentDidMount()` instead.\n\n**Example:**\n\n```jsx\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n  componentWillMount() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n  render() {\n    return <div>{this.state.count}</div>;\n  }\n}\n\nexport default App;\n```\n\n**OUTPUT:**\n\n```html\n<div>1</div>\n```\n","section":"26. How do I use componentWillMount?","source":"https://reactjs.org/"}],"27. When component did mount is called?":[{"title":"When component did mount is called?","content":"React component call the componentDidMount() method calls once after the component has been rendered to the DOM. This is where we can perform DOM-related operations, such as adding event listeners or timers. Because now out DOM is ready, we can start making changes to the DOM.\n\n**Example**\n\n```jsx\nclass App extends React.Component {\n state: Record<string, any> = {}\n constructor(props: any) {\n  super(props)\n  this.state = {\n   count: 0,\n  }\n  this.handleClick = this.handleClick.bind(this)\n }\n\n componentDidMount() {\n  console.log('Component Did Mount')\n }\n handleClick() {\n  this.setState({\n   count: this.state.count + 1,\n  })\n }\n render() {\n  console.log('Render Method')\n  return (\n   <div>\n    <p>{this.state.count}</p>\n    <button onClick={this.handleClick}>Increment</button>\n   </div>\n  )\n }\n}\nexport default App\n\n// Component Did Mount\n// Render Method\n// Render Method\n// Render Method\n// Render Method\n// Render Method\n// Render Method\n\n\n```\n","section":"27. When component did mount is called?","source":"https://www.geeksforgeeks.org/reactjs-lifecycle-components/"}],"28. What is componentWillReceiveProps?":[{"title":"What is componentWillReceiveProps?","content":"This method is used during the updating phase of the React lifecycle. This function is generally called if the props passed to the component change. It is used to update the state in response with the new received props.\n\n```jsx\nclass App extends React.Component {\n state: Record<string, any> = {}\n constructor(props: any) {\n  super(props)\n  this.state = {\n   count: 0,\n  }\n }\n render() {\n  return (\n   <>\n    <Child currentCount={this.state.count} />\n    <button\n     onClick={() =>\n      this.setState({\n       count: this.state.count + 1,\n      })\n     }>\n     Increment\n    </button>\n   </>\n  )\n }\n}\n\n```\n\n**Child**\n\n```jsx\n class Child extends Component<{ currentCount: number }> {\n componentWillReceiveProps(nextProps: any): void {\n  console.log('componentWillReceiveProps', nextProps)\n }\n render() {\n  return <div>Count - {this.props.currentCount}</div>\n }\n}```\n","section":"28. What is componentWillReceiveProps?","source":"https://reactjs.org/"}],"29. How can we display a list in react":[{"title":"How can we display a list in react ?","content":"\nTo Render a list in React. we can use the following code:\n\n**Class Based Component**\n\n```jsx\nclass App extends React.Component {\n  state = {\n    items: [],\n  }\n  componentDidMount() {\n    this.setState({\n      items: [\n        { id: 1, text: 'item 1' },\n        { id: 2, text: 'item 2' },\n        { id: 3, text: 'item 3' },\n      ],\n    })\n  }\n  render() {\n    return (\n      <div>\n        <ul>\n          {this.state.items.map(item => (\n            <li key={item.id}>{item.text}</li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n```\n\n**Functional Component**\n\n```jsx\nconst App = () => {\n  const items = [\n    { id: 1, text: 'item 1' },\n    { id: 2, text: 'item 2' },\n    { id: 3, text: 'item 3' },\n  ]\n  return (\n    <div>\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n","section":"29. How can we display a list in react","source":"https://reactjs.org/"}],"3. what-is-state-in-react":[{"title":"What is state in React?","content":"\nState is a plain JavaScript object that represents the state of a React component. That may change over time as the component updates over the component's lifecycle.\n\nState is the only part of a React component that can change over time.\n\n**Example: State in Class Based Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass MyComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcount: 0,\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>You clicked {this.state.count} times</p>\n\t\t\t\t<button onClick={() => this.setState({ count: this.state.count + 1 })}>\n\t\t\t\t\tClick me\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n**Example: State in Functional Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst MyComponent = () => {\n\tconst [count, setCount] = React.useState(0)\n\treturn (\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"3. what-is-state-in-react","source":"https://www.simplilearn.com/tutorials/reactjs-tutorial/reactjs-state"}],"30. What is the use of key in react":[{"title":"What is the use of key in react ?","content":"\nKeys are used to identify which item in a list has changed. Keys should be unique for each item in a list. The best way to generate a key is to use the item's IDs in the list.\n\n```jsx\nconst items = [\n  { id: 1, text: 'Hello' },\n  { id: 2, text: 'World' },\n  { id: 3, text: '!' },\n];\n\nconst listItems = items.map(item => (\n  <li key={item.id}>{item.text}</li>\n));\n```\n","section":"30. What is the use of key in react","source":"https://reactjs.org/"}],"31. What is reconciliation?":[{"title":"What is reconciliation?","content":"\nReconciliation is the process of comparing two sets of data and determining which items need to be added, removed, or updated to match the new data. This process is known as a diff, and it is often used to determine which DOM nodes need to be updated to reflect the new data. In React, reconciliation is performed automatically by React when the component is re-rendered. This is called reconciliation. The process of reconciling is known as a diff.\n","section":"31. What is reconciliation?","source":"https://reactjs.org/"}],"32. What is a purpose of code splitting?":[{"title":"What is a purpose of code splitting?","content":"\nCode Splitting is a technique for splitting large JavaScript files into smaller chunks. When we bundle our application we combine all the code into a single file and the browser initially loads the whole code. This can be a problem if the code is large and the browser has to download it all at once. Her Code splitting allows us to split the code into smaller chunks(file) and load each chunk separately when it is needed.\n\n<details>\n<summary>Example</summary>\n\n```jsx\nconst ChildComponent = React.lazy(() => import('./ChildComponent'))\n\nconst App = () => (\n\t<React.Suspense fallback={<div>Loading...</div>}>\n\t\t<ChildComponent />\n\t</React.Suspense>\n)\n```\n\n<details>\n","section":"32. What is a purpose of code splitting?","source":"https://reactjs.org/"}],"33. What is the proper placement for error boundaries?":[{"title":"What is the proper placement for error boundaries?","content":"\nError boundaries are React components that catch and display errors that occur in their children. They are useful for displaying error messages to the user. So it's best to place error boundaries at the top of the component tree and catch errors all the way down.\n","section":"33. What is the proper placement for error boundaries?","source":"https://reactjs.org/"}],"34. When to Use Context":[{"title":"When to Use Context","content":"\nContext is a way to pass data through the component tree without having to pass props down manually at every level. This can be very useful for keeping data that is shared between components local to the components that need it. For example, a global theme object or a current language.\n","section":"34. When to Use Context","source":"https://reactjs.org/"}],"35. How does a forward Ref work?":[{"title":"How does a forward Ref work?","content":"\nReact forwardRef is a method that allows parent components pass down (i.e., “forward”) refs to their children. Using forwardRef in React gives the child component a reference to a DOM element created by its parent component. This then allows the child to read and modify that element anywhere it is being used.\n","section":"35. How does a forward Ref work?","source":"https://reactjs.org/"}],"36. What is controlled component in react":[{"title":"What is controlled component in react ?","content":"\nComponents are those in which form’s data is handled by the component’s state. It takes its current value through props and makes changes through callbacks like onClick,onChange, etc.\n\n**Example**\n\n```js\nfunction App() {\n\tconst [name, setName] = useState('')\n\tconst [showName, setShowName] = useState(false)\n\n\tfunction handleSubmit(e) {\n\t\te.preventDefault()\n\t\tsetShowName(true)\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<form>\n\t\t\t\t<label>Name:</label>\n\t\t\t\t<input\n\t\t\t\t\tname='name'\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<button onClick={handleSubmit} type='submit'>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t{/* Checks the condition if showName is \n      true, which will be true only if \n      we click on the submit button */}\n\t\t\t{showName === true && <p>You have submitted. Name: {name}</p>}\n\t\t</div>\n\t)\n}\n\nexport default App\n```\n","section":"36. What is controlled component in react","source":"https://reactjs.org/"}],"37. What is uncontrolled component in react ?":[{"title":"What is uncontrolled component in react ?","content":"\nIn a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.\n\nTo write an uncontrolled component, instead of writing an event handler for every state update, we can use a `ref` to get form values from the DOM.\n","section":"37. What is uncontrolled component in react ?","source":"https://reactjs.org/"}],"38. What are higher-order component?":[{"title":"What are higher-order component?","content":"\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React's compositional nature. Concretely, a higher-order component is a function that takes a component and returns a new component.\n","section":"38. What are higher-order component?","source":"https://reactjs.org/"}],"39. What are the children in React?":[{"title":"What are the children in React?","content":"\nchildren is a special prop, automatically passed to every component, that can be used to render the content included between the opening and closing tags when invoking a component. These kinds of components are identified by the official documentation as “boxes”.\n\n```jsx\n<MyComponent>Hello world!</MyComponent>\n```\n","section":"39. What are the children in React?","source":"https://reactjs.org/"}],"4. what-is-react-and-why-use-it":[{"title":"What is React and why use it?","content":"\nReact is an open-source front-end JavaScript library that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.\n","section":"4. what-is-react-and-why-use-it","source":"https://github.com/sudheerj/reactjs-interview-questions#what-is-react"}],"40. What is the purpose of a function as a child in React?":[{"title":"What is the purpose of a function as a child in React?","content":"\nA Function as child component is a pattern that lets you pass a render function to a component as the children prop so you can change what you can pass as children to a component.\n","section":"40. What is the purpose of a function as a child in React?","source":"https://reactjs.org/"}],"41.What is virtualization in rendering?.md":[{"title":"What is virtualization in rendering?","content":"\nVirtualization is a technique that allows us to render only a subset of the items in a list. This is useful when we have a large list of items that we want to render, but we don't want to render all of them at once. This is especially useful when we have a list of items that are expensive to render, such as images or videos.\n","section":"41.What is virtualization in rendering?.md","source":"https://www.patterns.dev/posts/virtual-lists"}],"42.What is the use of React portals?.md":[{"title":"What is the use of React portals?","content":"\nPortals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. The first argument ( child ) is any renderable React child, such as an element, string, or fragment. The second argument ( container ) is a DOM element.\n\n**Example**\n\n```jsx\nconst App = () => {\n\treturn ReactDOM.createPortal(\n\t\t<h1>Portals Demo</h1>,\n\t\tdocument.querySelector('body')\n\t)\n}\n```\n","section":"42.What is the use of React portals?.md","source":"https://reactjs.org/"}],"43. What is the use of refs in React?.md":[{"title":"What is the use of refs in React?","content":"\nRefs provide a way to access DOM nodes or React elements created in the render method. Refs are useful when you need to manage focus, select text, or perform animations and working with third-party DOM libraries.\n\n**Example**\n\n```jsx\nclass CustomTextInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// create a ref to store the textInput DOM element\n\t\tthis.textInput = React.createRef()\n\t\tthis.focusTextInput = this.focusTextInput.bind(this)\n\t}\n\n\tfocusTextInput() {\n\t\t// Explicitly focus the text input using the raw DOM API\n\t\t// Note: we're accessing \"current\" to get the DOM node\n\t\tthis.textInput.current.focus()\n\t}\n\n\trender() {\n\t\t// tell React that we want to associate the <input> ref\n\t\t// with the `textInput` that we created in the constructor\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type='text' ref={this.textInput} />\n\n\t\t\t\t<input\n\t\t\t\t\ttype='button'\n\t\t\t\t\tvalue='Focus the text input'\n\t\t\t\t\tonClick={this.focusTextInput}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n","section":"43. What is the use of refs in React?.md","source":"https://reactjs.org/"}],"44. What are the render props?.md":[{"title":"What are the render props?","content":"\nThe term “render prop” refers to a technique for sharing code between React components using a prop whose value is a function. A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.\n\n**Example**\n\n```jsx\nconst Mouse = (props) => {\n\tconst [mouse, setMouse] = useState({ x: 0, y: 0 })\n\n\tconst handleMouseMove = (event) => {\n\t\tsetMouse({\n\t\t\tx: event.clientX,\n\t\t\ty: event.clientY,\n\t\t})\n\t}\n\n\treturn (\n\t\t<div style={{ height: '100%' }} onMouseMove={handleMouseMove}>\n\t\t\t{props.render(mouse)}\n\t\t</div>\n\t)\n}\n\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Move the mouse around!</h1>\n\t\t\t<Mouse\n\t\t\t\trender={(mouse) => (\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe current mouse position is ({mouse.x}, {mouse.y})\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n","section":"44. What are the render props?.md","source":"https://reactjs.org/"}],"45. What is Strict Mode in react ?.md":[{"title":"What is Strict Mode in react ?","content":"\nStrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.\n\n**Example**\n\n```jsx\nimport React from 'react'\n\nfunction ExampleApplication() {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<React.StrictMode>\n\t\t\t\t<div>\n\t\t\t\t\t<ProfilePage />\n\t\t\t\t</div>\n\t\t\t</React.StrictMode>\n\t\t\t<Footer />\n\t\t</div>\n\t)\n}\n```\n","section":"45. What is Strict Mode in react ?.md","source":"https://reactjs.org/"}],"46. What are Hooks in React ?.md":[{"title":"What are Hooks in React ?","content":"\nHooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\n","section":"46. What are Hooks in React ?.md","source":"https://reactjs.org/"}],"47. What are the two rules of React Hooks?.md":[{"title":"What are the two rules of React Hooks?","content":"\nHooks are JavaScript functions, but they impose two additional rules:\n\n- Don't call Hooks inside loops, conditions, or nested functions.\n- Only call Hooks from React function components.\n","section":"47. What are the two rules of React Hooks?.md","source":"https://reactjs.org"}],"48. Why is useEffect used?.md":[{"title":"Why is useEffect used?","content":"\nThe motivation behind the introduction of useEffect Hook is to eliminate the side-effects of using class-based components. For example, tasks like updating the DOM, fetching data from API end-points, setting up subscriptions or timers, etc can be lead to unwarranted side-effects.\n","section":"48. Why is useEffect used?.md"}],"49. What is useState used for?.md":[{"title":"What is useState used for?","content":"\nuseState is a Hook (function) that allows us to have state variables in functional components.\n\n```js\nconst [count, setCount] = useState(0)\n```\n\nuseState returns an array with 2 values: the current state and a function to update it.\n\n**Example**\n\n```js\nimport React, { useState } from 'react'\nfunction Example() {\n\t// Declare a new state variable, which we'll call \"count\"\n\tconst [count, setCount] = useState(0)\n\treturn (\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"49. What is useState used for?.md","source":"https://reactjs.org/"}],"5. what-are-the-differences-between-props-and-state":[{"title":"What are the differences between props and state","content":"\nBoth props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.\n","section":"5. what-are-the-differences-between-props-and-state","source":"https://www.geeksforgeeks.org/what-are-the-differences-between-props-and-state/"}],"50. What is useContext used for in React?.md":[{"title":"What is useContext used for in React?","content":"\nContext provides a way to pass data or state through the component tree without having to pass props down manually through each nested component.\n\n**Example**\n\n```js\nimport { render } from 'react-dom'\nimport React, { useState } from 'react'\nconst ThemeContext = React.createContext('light')\n\nfunction App() {\n\tconst [theme, setTheme] = useState('light')\n\treturn (\n\t\t<ThemeContext.Provider value={{ setTheme, theme }}>\n\t\t\t<Toolbar />\n\t\t</ThemeContext.Provider>\n\t)\n}\n```\n\n## useContext\n\n```js\nimport React, { useContext } from 'react'\nfunction Toolbar() {\n\tconst { theme, setTheme } = useContext(ThemeContext)\n\treturn (\n\t\t<div>\n\t\t\tCurrent theme: {theme}\n\t\t\t<button onClick={() => setTheme('dark')}>Dark</button>\n\t\t\t<button onClick={() => setTheme('light')}>Light</button>\n\t\t</div>\n\t)\n}\n```\n","section":"50. What is useContext used for in React?.md","source":"https://reactjs.org/"}],"51. What is useReducer for?.md":[{"title":"What is useReducer for?","content":"\nuseReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.\n\n**Example**\n\n```js\nfunction reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'reset':\n\t\t\treturn init(action.payload)\n\t\tcase 'increment':\n\t\t\treturn { count: state.count + 1 }\n\t\tcase 'decrement':\n\t\t\treturn { count: state.count - 1 }\n\t\tdefault:\n\t\t\tthrow new Error()\n\t}\n}\n\nfunction Counter() {\n\tconst [state, dispatch] = useReducer(reducer, { count: 1 })\n\treturn (\n\t\t<>\n\t\t\tCount: {state.count}\n\t\t\t<button\n\t\t\t\tonClick={() => dispatch({ type: 'reset', payload: initialCount })}>\n\t\t\t\tReset\n\t\t\t</button>\n\t\t\t<button onClick={() => dispatch({ type: 'increment' })}>+</button>\n\t\t\t<button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n\t\t</>\n\t)\n}\n```\n","section":"51. What is useReducer for?.md","source":"https://reactjs.org/"}],"52. Why useCallback is used in React?.md":[{"title":"Why useCallback is used in React?","content":"\nThe `useCallback` hook is used to memorize the callback function. It is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. `shouldComponentUpdate`).\n\n**Example**\n\n```js\nconst Child = React.memo(function Child({ onClick, name }) {\n\tconsole.log('Rendering Child', name)\n\treturn (\n\t\t<button onClick={onClick} type='button'>\n\t\t\t{name}\n\t\t</button>\n\t)\n})\n\nconst Parent = () => {\n\tconst [count, setCount] = useState(0)\n\tconst [name, setName] = useState('Mary')\n\n\tconst handleAlertClick = useCallback(() => {\n\t\tsetTimeout(() => {\n\t\t\talert('You clicked on: ' + name)\n\t\t}, 3000)\n\t}, [name])\n\n\treturn (\n\t\t<div>\n\t\t\t<Child name={name} onClick={handleAlertClick} />\n\t\t\t<hr />\n\t\t\t<button onClick={() => setCount((c) => c + 1)}>+ {count}</button>\n\t\t\t<button onClick={() => setName('John')}>Change name</button>\n\t\t</div>\n\t)\n}\n```\n","section":"52. Why useCallback is used in React?.md","source":"https://reactjs.org/"}],"53. What is useMemo used for?.md":[{"title":"What is useMemo used for?","content":"\nuseMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n\n**Example**\n\n```js\nconst App = () => {\n\tconst [val, setVal] = useState(0)\n\tconst [val2, setVal2] = useState(0)\n\n\tconst expensive = useMemo(() => {\n\t\tlet i = 0\n\t\twhile (i < 1000000000) i++\n\t\treturn val + val2\n\t}, [val, val2])\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val}\n\t\t\t\tonChange={(e) => setVal(parseInt(e.target.value))}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val2}\n\t\t\t\tonChange={(e) => setVal2(parseInt(e.target.value))}\n\t\t\t/>\n\t\t\t<div>{expensive}</div>\n\t\t</div>\n\t)\n}\n```\n\nThe above example will only recompute the expensive value when the val or val2 changes. If you remove the dependency array, the expensive value will be recomputed on every render.\n","section":"53. What is useMemo used for?.md","source":"https://reactjs.org/"}],"54. What is useRef used for?.md":[{"title":"What is useRef used for?","content":"\nThe useRef Hook allows you to persist values between renders. It can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.\n\n**Example**\n\n```js\nfunction TextInputWithFocusButton() {\n\tconst inputEl = useRef(null)\n\tconst onButtonClick = () => {\n\t\t// `current` points to the mounted text input element\n\t\tinputEl.current.focus()\n\t}\n\treturn (\n\t\t<>\n\t\t\t<input ref={inputEl} type='text' />\n\t\t\t<button onClick={onButtonClick}>Focus the input</button>\n\t\t</>\n\t)\n}\n```\n","section":"54. What is useRef used for?.md","source":"https://reactjs.org/"}],"55. Does useLayoutEffect run before render?.md":[{"title":"Does useLayoutEffect run before render?","content":"\nThe useLayoutEffect hook works synchronously. It runs immediately after React has performed all DOM mutations. It will run after every render but before the screen is updated.\n\n```js\nconst App = () => {\n\tconst [val, setVal] = useState(0)\n\tconst [val2, setVal2] = useState(0)\n\n\tuseLayoutEffect(() => {\n\t\tconsole.log('useLayoutEffect')\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val}\n\t\t\t\tonChange={(e) => setVal(parseInt(e.target.value))}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val2}\n\t\t\t\tonChange={(e) => setVal2(parseInt(e.target.value))}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n","section":"55. Does useLayoutEffect run before render?.md","source":"https://reactjs.org/"}],"56. What is reconciliation?.md":[{"title":"What is reconciliation?","content":"\nWhen a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.\n","section":"56. What is reconciliation?.md","source":"https://reactjs.org/"}],"57. What is fragment in Reactjs and why do we use it?.md":[{"title":"What is fragment in Reactjs and why do we use it?","content":"\nReact Fragments allow you to wrap or group multiple elements without adding an extra node to the DOM. This can be useful when rendering multiple child elements/components in a single parent component.\n\n**Example**\n\n```js\nimport React from 'react'\n\nfunction FragmentDemo() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<h1>Fragment Demo</h1>\n\t\t\t<p>This describes the Fragment Demo component</p>\n\t\t</React.Fragment>\n\t)\n}\n```\n\nOr\n\n```js\nimport React from 'react'\n\nfunction FragmentDemo() {\n\treturn (\n\t\t<>\n\t\t\t<h1>Fragment Demo</h1>\n\t\t\t<p>This describes the Fragment Demo component</p>\n\t\t</>\n\t)\n}\n```\n","section":"57. What is fragment in Reactjs and why do we use it?.md","source":"https://reactjs.org/"}],"6. what-are-pure-components-with-example":[{"title":"What are pure components with example?","content":"\nPure component, it is only re-rendered when its props change. They are a good way to optimize your application. Pure components are a good way to avoid bugs caused by side-effects. It's doesn't have a life cycle or state.\n\n**Example of a pure component:**\n\n```jsx\nimport React from 'react'\n\nconst PureComponent = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>{props.title}</h1>\n\t\t</div>\n\t)\n}\n\nexport default PureComponent\n```\n\n**Example of a component that is not pure:**\n\n```jsx\nimport React from 'react'\n\nconst Component = (props) => {\n\tconst [count, setCount] = React.useState(0)\n\tuseEffect(() => {\n\t\tfetch('https://api.github.com/users/facebook/repos')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCount(data.length)\n\t\t\t})\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{props.title}</h1>\n\t\t\t<h2>{count}</h2>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"6. what-are-pure-components-with-example"}],"60. What is stateless and stateful components?.md":[{"title":"What is stateless and stateful components?","content":"\n**Stateless components**\n\nStateless components are components that do not have state. They are also called functional components. They are just functions that take props as an argument and return a React element. They are also called pure components because they do not have any side effects.\n\n```js\nconst StatelessComponent = (props) => {\n\treturn <div>{props.name}</div>\n}\n```\n\n**Stateful components**\n\nStateful components are components that have state. They are also called class components. They are classes that extend React.Component and have a render method. They are also called impure components because they have side effects. But In React Hooks, we can also use state in functional components.\n\n```js\nclass StatefulComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tname: 'John',\n\t\t}\n\t}\n\trender() {\n\t\treturn <div>{this.state.name}</div>\n\t}\n}\n```\n\n**Hooks in functional components**\n\n```js\nimport React, { useState } from 'react'\n\nfunction FunctionalComponent() {\n\tconst [name, setName] = useState('John')\n\treturn <div>{name}</div>\n}\n```\n","section":"60. What is stateless and stateful components?.md","source":"https://reactjs.org/"}],"61. What are keys used for in React?.md":[{"title":"What are keys used for in React?","content":"\nKeys help React identify which items have changed, are added, or are removed.\n","section":"61. What are keys used for in React?.md","source":"https://reactjs.org/"}],"7. what-are-props-in-react":[{"title":"What are props in React?","content":"\nProps are arguments passed into a component. They are single or multiple values that are passed into a component similar to how attributes are passed into an HTML element. They are data passed down from a parent component to a child component. It's useful to pass custom data into a component. Manually tiggering a re-render is not necessary.\n\n**Example: Props in Class Based Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass ChildComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>{this.props.name}</p>\n\t\t\t\t<p>{this.props.age}</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass ParentComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ChildComponent name='John' age='30' />\n\t\t\t\t<ChildComponent name='Mary' age='25' />\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n**Example: Props in Functional Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst ChildComponent = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>{props.name}</p>\n\t\t\t<p>{props.age}</p>\n\t\t</div>\n\t)\n}\n\nconst ParentComponent = () => {\n\treturn (\n\t\t<div>\n\t\t\t<ChildComponent name='John' age='30' />\n\t\t\t<ChildComponent name='Mary' age='25' />\n\t\t</div>\n\t)\n}\n```\n","section":"7. what-are-props-in-react","source":"https://www.w3schools.com/react/react_props.asp#:~:text=Props%20are%20arguments%20passed%20into,props%20stands%20for%20properties."}],"8. how-to-create-components-in-react":[{"title":"How to create components in React?","content":"\nThere are two ways to create components in React:\n\n    1. Create a component class.\n    2. Create a function component.\n\n1. **Create a component class.**\n   ES6 class syntax is used to create a component class.\n\n```jsx\nimport React from 'react'\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Hello World</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n2. **Create a function component.**\n   Function syntax is used to create a function component.\n\n   ```jsx\n   import React from 'react'\n   const App = () => {\n   \treturn (\n   \t\t<div>\n   \t\t\t<h1>Hello World</h1>\n   \t\t</div>\n   \t)\n   }\n   ```\n\nBoth components can be rendered to the screen using ReactDOM.render().\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n","section":"8. how-to-create-components-in-react"}],"9. how-jsx-works-in-react":[{"title":"How JSX works in React ?","content":"\nJSX is a syntax extension to JavaScript that allows us to write HTML like syntax. It is a subset of JavaScript that allows us to write HTML-like syntax.\n\n**Withouts JSX we would have to write HTML like syntax.**\n\n```jsx\nconst element = React.createElement(\n\t'div',\n\tnull,\n\tReact.createElement('h1', null, 'This is a header'),\n\tReact.createElement('p', null, 'This is a paragraph')\n)\n```\n\n**With JSX we can write HTML like syntax.**\n\n```jsx\nconst element = (\n\t<div>\n\t\t<h1>This is a header</h1>\n\t\t<p>This is a paragraph</p>\n\t</div>\n)\n```\n\nJSX uses babel to transpile HTML like syntax to JavaScript. Babel is a compiler that transpiles JavaScript code to JavaScript.\n","section":"9. how-jsx-works-in-react"}]}